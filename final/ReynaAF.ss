(define (findMaximum L)
  (if (null? L) '()
    (if (null? (cdr L)) (car L)
      (let ((maxVal (car L)))
        (if (> (findMaximum (cdr L)) maxVal)
          (findMaximum (cdr L))
          maxVal
        )
      )     
    )
  )  
)

(define (removeFromList val L)
  (if (null? L) '()
    (cond ((equal? val (car L)) (cdr L))
          (else (cons (car L) (removeFromList val (cdr L))))
    )
  )  
)

(define (selectSort L)
  (if (null? L) '()
    (let ((maxVal (findMaximum L)))
      (cons maxVal (selectSort (removeFromList maxVal L)))
    )  
  )
)

(define (main)
  (display (findMaximum '(1 3 5 -2 15 -3)))
  (newline)
  (display (findMaximum '(-1 -2 5 -3 -4)))
  (newline) 
  (display (removeFromList  -4 '(-1 2 5 -3 -4 5)))
  (newline)
  (display (selectSort '(1 -1 5 3 -6.2 2.5 -3 4 -1 7 15)))     
  (newline)
)
(main)