(define (cond_ex_1 p)
 (cond ((= p 0) 'equal)
 ((< p 0) 'negative)
 (else 'positive)
 )
)
(define (cond_ex_2 param)
 (cond ((= param 1) 'The_value_is_1)
 ((= param 2) 'The_value_is_2)
 ((= param 12) 'The_value_is_12)
 (else 'none_of_the_above)
 )
 )
(define (cond_ex_3 choice value)
  (cond ((= choice 1) value)
	((= choice 2) * value value)
	((= choice 3) (/ 1 value))
	(else 0)
  )
)

(display (cond_ex_3 1 2))
(newline)
(display (cond_ex_3 2 2))
(newline)
(display (cond_ex_3 3 2))
(newline)
(display (cond_ex_3 4 1))
(newline)
(display (cond_ex_1 5))
(newline)
(display (cond_ex_1 -5))
(newline)
(display (cond_ex_1 0))
(newline)
(display (cond_ex_2 1))
(newline)
(display (cond_ex_2 12))
(newline)
(display (cond_ex_2 5))
(newline)
(display (cond_ex_2 2))
(newline)
(display (cond_ex_1 -5))
(newline)
(display (cond_ex_1 0))
(newline)
(display (cond_ex_2 1))
(newline)
(display (cond_ex_2 12))
(newline)
(display (cond_ex_2 5))
(newline)
(display (cond_ex_1 -5))
(newline)
(display (cond_ex_1 0))
(newline)
(display (cond_ex_2 1))
(newline)
(display (cond_ex_2 12))
(newline)
(display (cond_ex_2 5))
(newline)
(display (cond_ex_2 2))
(newline)
